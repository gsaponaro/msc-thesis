
SET(LIB_TARGET "baltaKin")
SET(LIB_PKG "BALTAKIN")

MESSAGE(STATUS "Using ${LIB_PKG}Config.cmake")

SET(LIB_DIR ${${LIB_PKG}_DIR})

SET(ADD_IPOPT TRUE CACHE BOOL "Dou you want to add IPOPT library?")
IF(ADD_IPOPT)
   FIND_PACKAGE(IPOPT)
   IF(NOT IPOPT_FOUND)
      MESSAGE("IPOPT not found! Keep on building...")
   ENDIF(NOT IPOPT_FOUND)
ENDIF(ADD_IPOPT)


SET(${LIB_PKG}_INCLUDE_DIRS ${LIB_DIR}/include ${IPOPT_INC_DIRS})


IF(NESTED_BUILD)

  IF(IPOPT_FOUND)
    SET(${LIB_PKG}_LIBRARIES ${LIB_TARGET} ${IPOPT_LIB})
  ELSE(IPOPT_FOUND)
    SET(${LIB_PKG}_LIBRARIES ${LIB_TARGET})
  ENDIF(IPOPT_FOUND)

ELSE(NESTED_BUILD)

  FIND_LIBRARY(${LIB_PKG}_LIBRARIES ${LIB_TARGET} ${LIB_DIR})  

  IF(NOT ${LIB_PKG}_LIBRARIES)

    FIND_LIBRARY(${LIB_PKG}_LIBRARIES_RELEASE ${LIB_TARGET} 
		 ${LIB_DIR}/Release NO_DEFAULT_PATH)
    FIND_LIBRARY(${LIB_PKG}_LIBRARIES_DEBUG ${LIB_TARGET} 
		 ${LIB_DIR}/Debug NO_DEFAULT_PATH)

    IF(${LIB_PKG}_LIBRARIES_RELEASE AND NOT ${LIB_PKG}_LIBRARIES_DEBUG)
       SET(${LIB_PKG}_LIBRARIES_RELEASE ${${LIB_PKG}_LIBRARIES_RELEASE} ${IPOPT_LIB_R})
       SET(${LIB_PKG}_LIBRARIES ${${LIB_PKG}_LIBRARIES_RELEASE} CACHE PATH "release version of library" FORCE)
    ENDIF(${LIB_PKG}_LIBRARIES_RELEASE AND NOT ${LIB_PKG}_LIBRARIES_DEBUG)

    IF(${LIB_PKG}_LIBRARIES_DEBUG AND NOT ${LIB_PKG}_LIBRARIES_RELEASE)
       SET(${LIB_PKG}_LIBRARIES_DEBUG ${${LIB_PKG}_LIBRARIES_DEBUG} ${IPOPT_LIB_D})
       SET(${LIB_PKG}_LIBRARIES ${${LIB_PKG}_LIBRARIES_DEBUG} CACHE PATH "debug version of library" FORCE)
    ENDIF(${LIB_PKG}_LIBRARIES_DEBUG AND NOT ${LIB_PKG}_LIBRARIES_RELEASE)

    IF(${LIB_PKG}_LIBRARIES_DEBUG AND ${LIB_PKG}_LIBRARIES_RELEASE)
       SET(${LIB_PKG}_LIBRARIES_RELEASE ${${LIB_PKG}_LIBRARIES_RELEASE} ${IPOPT_LIB_R})
       SET(${LIB_PKG}_LIBRARIES_DEBUG ${${LIB_PKG}_LIBRARIES_DEBUG} ${IPOPT_LIB_D})
       SET(${LIB_PKG}_LIBRARIES optimized ${${LIB_PKG}_LIBRARIES_RELEASE}
			        debug ${${LIB_PKG}_LIBRARIES_DEBUG} CACHE PATH "debug and release version of library" FORCE)
    ENDIF(${LIB_PKG}_LIBRARIES_DEBUG AND ${LIB_PKG}_LIBRARIES_RELEASE)

    MARK_AS_ADVANCED(${LIB_PKG}_LIBRARIES_RELEASE)
    MARK_AS_ADVANCED(${LIB_PKG}_LIBRARIES_DEBUG)

  ELSE(NOT ${LIB_PKG}_LIBRARIES)

    IF(IPOPT_FOUND)
      SET(${LIB_PKG}_LIBRARIES ${${LIB_PKG}_LIBRARIES} ${IPOPT_LIB})
    ELSE(IPOPT_FOUND)
      SET(${LIB_PKG}_LIBRARIES ${${LIB_PKG}_LIBRARIES})
    ENDIF(IPOPT_FOUND)

  ENDIF(NOT ${LIB_PKG}_LIBRARIES)

ENDIF(NESTED_BUILD)


IF(${LIB_PKG}_INCLUDE_DIRS AND ${LIB_PKG}_LIBRARIES)
   SET(${LIB_PKG}_FOUND TRUE)
ELSE(${LIB_PKG}_INCLUDE_DIRS AND ${LIB_PKG}_LIBRARIES)
   SET(${LIB_PKG}_FOUND FALSE)
ENDIF(${LIB_PKG}_INCLUDE_DIRS AND ${LIB_PKG}_LIBRARIES)



